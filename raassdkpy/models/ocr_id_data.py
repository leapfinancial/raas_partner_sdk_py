# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class OcrIdData(BaseModel):
    """
    OcrIdData
    """
    seccion: Optional[StrictStr] = Field(None, alias="Seccion")
    municipio: Optional[StrictStr] = Field(None, alias="Municipio")
    localidad: Optional[StrictStr] = Field(None, alias="Localidad")
    estado: Optional[StrictStr] = Field(None, alias="Estado")
    issue_date: Optional[StrictStr] = Field(None, alias="IssueDate")
    gender: Optional[StrictStr] = Field(None, alias="Gender")
    second_last_name: Optional[StrictStr] = Field(None, alias="SecondLastName")
    middle_name: Optional[StrictStr] = Field(None, alias="MiddleName")
    full_name: Optional[StrictStr] = Field(None, alias="FullName")
    id_number: Optional[StrictStr] = Field(None, alias="IDNumber")
    country2: Optional[StrictStr] = Field(None, alias="Country2")
    country: StrictStr = Field(..., alias="Country")
    exp_date: StrictStr = Field(..., alias="ExpDate")
    do_b: StrictStr = Field(..., alias="DoB")
    last_name: StrictStr = Field(..., alias="LastName")
    address: Optional[StrictStr] = Field(None, alias="Address")
    first_name: StrictStr = Field(..., alias="FirstName")
    document_type: StrictStr = Field(..., alias="DocumentType")
    __properties = ["Seccion", "Municipio", "Localidad", "Estado", "IssueDate", "Gender", "SecondLastName", "MiddleName", "FullName", "IDNumber", "Country2", "Country", "ExpDate", "DoB", "LastName", "Address", "FirstName", "DocumentType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OcrIdData:
        """Create an instance of OcrIdData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OcrIdData:
        """Create an instance of OcrIdData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OcrIdData.parse_obj(obj)

        _obj = OcrIdData.parse_obj({
            "seccion": obj.get("Seccion"),
            "municipio": obj.get("Municipio"),
            "localidad": obj.get("Localidad"),
            "estado": obj.get("Estado"),
            "issue_date": obj.get("IssueDate"),
            "gender": obj.get("Gender"),
            "second_last_name": obj.get("SecondLastName"),
            "middle_name": obj.get("MiddleName"),
            "full_name": obj.get("FullName"),
            "id_number": obj.get("IDNumber"),
            "country2": obj.get("Country2"),
            "country": obj.get("Country"),
            "exp_date": obj.get("ExpDate"),
            "do_b": obj.get("DoB"),
            "last_name": obj.get("LastName"),
            "address": obj.get("Address"),
            "first_name": obj.get("FirstName"),
            "document_type": obj.get("DocumentType")
        })
        return _obj


