# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from raassdkpy.models.cip_token import CipToken
from raassdkpy.models.face_match import FaceMatch
from raassdkpy.models.ocr_id import OcrId
from raassdkpy.models.validate_name import ValidateName

class LolaValidationsEvent(BaseModel):
    """
    LolaValidationsEvent
    """
    cip_token: CipToken = Field(..., alias="cipToken")
    validate_name: ValidateName = Field(...)
    date_birth: StrictStr = Field(..., alias="dateBirth")
    address: Optional[StrictStr] = None
    ocr_id: OcrId = Field(...)
    id_img: StrictStr = Field(...)
    id_data: StrictStr = Field(...)
    id_img_check: StrictBool = Field(...)
    face_from_id_b64: StrictStr = Field(...)
    selfie_img_check: Optional[StrictBool] = Field(None, description="Fields when requestSelfie is true")
    selfie_img: Optional[StrictStr] = None
    pol_check: Optional[StrictBool] = Field(None, description="fields when proofOfLife is true")
    last_frame: Optional[StrictStr] = None
    face_match: Optional[FaceMatch] = None
    __properties = ["cipToken", "validate_name", "dateBirth", "address", "ocr_id", "id_img", "id_data", "id_img_check", "face_from_id_b64", "selfie_img_check", "selfie_img", "pol_check", "last_frame", "face_match"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LolaValidationsEvent:
        """Create an instance of LolaValidationsEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of cip_token
        if self.cip_token:
            _dict['cipToken'] = self.cip_token.to_dict()
        # override the default output from pydantic by calling `to_dict()` of validate_name
        if self.validate_name:
            _dict['validate_name'] = self.validate_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ocr_id
        if self.ocr_id:
            _dict['ocr_id'] = self.ocr_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of face_match
        if self.face_match:
            _dict['face_match'] = self.face_match.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LolaValidationsEvent:
        """Create an instance of LolaValidationsEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LolaValidationsEvent.parse_obj(obj)

        _obj = LolaValidationsEvent.parse_obj({
            "cip_token": CipToken.from_dict(obj.get("cipToken")) if obj.get("cipToken") is not None else None,
            "validate_name": ValidateName.from_dict(obj.get("validate_name")) if obj.get("validate_name") is not None else None,
            "date_birth": obj.get("dateBirth"),
            "address": obj.get("address"),
            "ocr_id": OcrId.from_dict(obj.get("ocr_id")) if obj.get("ocr_id") is not None else None,
            "id_img": obj.get("id_img"),
            "id_data": obj.get("id_data"),
            "id_img_check": obj.get("id_img_check"),
            "face_from_id_b64": obj.get("face_from_id_b64"),
            "selfie_img_check": obj.get("selfie_img_check"),
            "selfie_img": obj.get("selfie_img"),
            "pol_check": obj.get("pol_check"),
            "last_frame": obj.get("last_frame"),
            "face_match": FaceMatch.from_dict(obj.get("face_match")) if obj.get("face_match") is not None else None
        })
        return _obj


