# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, List, Optional
from pydantic import BaseModel, conlist
from raassdkpy.models.tenant_raa_s_notification import TenantRaaSNotification

class TenantRules(BaseModel):
    """
    TenantRules
    """
    raas_notifications_off: Optional[conlist(TenantRaaSNotification)] = None
    signup: Optional[Any] = None
    send: Optional[Any] = None
    request: Optional[Any] = None
    __properties = ["raas_notifications_off", "signup", "send", "request"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TenantRules:
        """Create an instance of TenantRules from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if signup (nullable) is None
        # and __fields_set__ contains the field
        if self.signup is None and "signup" in self.__fields_set__:
            _dict['signup'] = None

        # set to None if send (nullable) is None
        # and __fields_set__ contains the field
        if self.send is None and "send" in self.__fields_set__:
            _dict['send'] = None

        # set to None if request (nullable) is None
        # and __fields_set__ contains the field
        if self.request is None and "request" in self.__fields_set__:
            _dict['request'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TenantRules:
        """Create an instance of TenantRules from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TenantRules.parse_obj(obj)

        _obj = TenantRules.parse_obj({
            "raas_notifications_off": obj.get("raas_notifications_off"),
            "signup": obj.get("signup"),
            "send": obj.get("send"),
            "request": obj.get("request")
        })
        return _obj


