# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from raassdkpy.models.template_word import TemplateWord

class TemplateLine(BaseModel):
    """
    TemplateLine
    """
    words: conlist(TemplateWord) = Field(...)
    height: Union[StrictFloat, StrictInt] = Field(...)
    left: Union[StrictFloat, StrictInt] = Field(...)
    top: Union[StrictFloat, StrictInt] = Field(...)
    width: Union[StrictFloat, StrictInt] = Field(...)
    text: StrictStr = Field(...)
    __properties = ["words", "height", "left", "top", "width", "text"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TemplateLine:
        """Create an instance of TemplateLine from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in words (list)
        _items = []
        if self.words:
            for _item in self.words:
                if _item:
                    _items.append(_item.to_dict())
            _dict['words'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TemplateLine:
        """Create an instance of TemplateLine from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TemplateLine.parse_obj(obj)

        _obj = TemplateLine.parse_obj({
            "words": [TemplateWord.from_dict(_item) for _item in obj.get("words")] if obj.get("words") is not None else None,
            "height": obj.get("height"),
            "left": obj.get("left"),
            "top": obj.get("top"),
            "width": obj.get("width"),
            "text": obj.get("text")
        })
        return _obj


