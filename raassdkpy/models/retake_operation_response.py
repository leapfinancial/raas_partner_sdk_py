# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from raassdkpy.models.contact import Contact
from raassdkpy.models.draft_operation import DraftOperation
from raassdkpy.models.token_reponse import TokenReponse

class RetakeOperationResponse(BaseModel):
    """
    RetakeOperationResponse
    """
    apikey: StrictStr = Field(...)
    tokens: TokenReponse = Field(...)
    to_contact: Optional[Contact] = Field(None, alias="toContact")
    draft_op: DraftOperation = Field(..., alias="draftOp")
    __properties = ["apikey", "tokens", "toContact", "draftOp"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RetakeOperationResponse:
        """Create an instance of RetakeOperationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of tokens
        if self.tokens:
            _dict['tokens'] = self.tokens.to_dict()
        # override the default output from pydantic by calling `to_dict()` of to_contact
        if self.to_contact:
            _dict['toContact'] = self.to_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of draft_op
        if self.draft_op:
            _dict['draftOp'] = self.draft_op.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RetakeOperationResponse:
        """Create an instance of RetakeOperationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RetakeOperationResponse.parse_obj(obj)

        _obj = RetakeOperationResponse.parse_obj({
            "apikey": obj.get("apikey"),
            "tokens": TokenReponse.from_dict(obj.get("tokens")) if obj.get("tokens") is not None else None,
            "to_contact": Contact.from_dict(obj.get("toContact")) if obj.get("toContact") is not None else None,
            "draft_op": DraftOperation.from_dict(obj.get("draftOp")) if obj.get("draftOp") is not None else None
        })
        return _obj


