# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class TokenReponse(BaseModel):
    """
    TokenReponse
    """
    api_key_token: Optional[StrictStr] = Field(None, alias="apiKeyToken")
    reset_token: Optional[StrictStr] = Field(None, alias="resetToken")
    fbtoken: Optional[StrictStr] = None
    refresh_token_mins: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="refreshTokenMins")
    refresh_token_exp: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="refreshTokenExp")
    refresh_token: Optional[StrictStr] = Field(None, alias="refreshToken")
    token: Optional[StrictStr] = None
    __properties = ["apiKeyToken", "resetToken", "fbtoken", "refreshTokenMins", "refreshTokenExp", "refreshToken", "token"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TokenReponse:
        """Create an instance of TokenReponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TokenReponse:
        """Create an instance of TokenReponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TokenReponse.parse_obj(obj)

        _obj = TokenReponse.parse_obj({
            "api_key_token": obj.get("apiKeyToken"),
            "reset_token": obj.get("resetToken"),
            "fbtoken": obj.get("fbtoken"),
            "refresh_token_mins": obj.get("refreshTokenMins"),
            "refresh_token_exp": obj.get("refreshTokenExp"),
            "refresh_token": obj.get("refreshToken"),
            "token": obj.get("token")
        })
        return _obj


