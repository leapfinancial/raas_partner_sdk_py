# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from raassdkpy.models.landmark import Landmark
from raassdkpy.models.template_block import TemplateBlock
from raassdkpy.models.template_field import TemplateField

class TemplateSide(BaseModel):
    """
    TemplateSide
    """
    fields: Optional[conlist(TemplateField)] = None
    blocks: Optional[conlist(TemplateBlock)] = None
    landmarks: Optional[conlist(Landmark)] = None
    has_mrz: Optional[StrictBool] = Field(None, alias="hasMRZ")
    img_bucket: Optional[StrictStr] = Field(None, alias="imgBucket")
    img_file: Optional[StrictStr] = Field(None, alias="imgFile")
    img_height: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="imgHeight")
    img_width: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="imgWidth")
    mrz_position: Optional[StrictStr] = Field(None, alias="mrzPosition")
    __properties = ["fields", "blocks", "landmarks", "hasMRZ", "imgBucket", "imgFile", "imgHeight", "imgWidth", "mrzPosition"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TemplateSide:
        """Create an instance of TemplateSide from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in fields (list)
        _items = []
        if self.fields:
            for _item in self.fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['fields'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in blocks (list)
        _items = []
        if self.blocks:
            for _item in self.blocks:
                if _item:
                    _items.append(_item.to_dict())
            _dict['blocks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in landmarks (list)
        _items = []
        if self.landmarks:
            for _item in self.landmarks:
                if _item:
                    _items.append(_item.to_dict())
            _dict['landmarks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TemplateSide:
        """Create an instance of TemplateSide from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TemplateSide.parse_obj(obj)

        _obj = TemplateSide.parse_obj({
            "fields": [TemplateField.from_dict(_item) for _item in obj.get("fields")] if obj.get("fields") is not None else None,
            "blocks": [TemplateBlock.from_dict(_item) for _item in obj.get("blocks")] if obj.get("blocks") is not None else None,
            "landmarks": [Landmark.from_dict(_item) for _item in obj.get("landmarks")] if obj.get("landmarks") is not None else None,
            "has_mrz": obj.get("hasMRZ"),
            "img_bucket": obj.get("imgBucket"),
            "img_file": obj.get("imgFile"),
            "img_height": obj.get("imgHeight"),
            "img_width": obj.get("imgWidth"),
            "mrz_position": obj.get("mrzPosition")
        })
        return _obj


