# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from raassdkpy.models.videos_url import VideosUrl

class IApp(BaseModel):
    """
    IApp
    """
    id: StrictStr = Field(...)
    code: StrictStr = Field(...)
    ios_app_version: StrictStr = Field(..., alias="iosAppVersion")
    ios_build_version: Union[StrictFloat, StrictInt] = Field(..., alias="iosBuildVersion")
    android_app_version: StrictStr = Field(..., alias="androidAppVersion")
    android_build_version: Union[StrictFloat, StrictInt] = Field(..., alias="androidBuildVersion")
    android_store: StrictStr = Field(..., alias="androidStore")
    ios_store: StrictStr = Field(..., alias="iosStore")
    force_update: Optional[StrictBool] = Field(None, alias="forceUpdate")
    videos: Optional[VideosUrl] = None
    __properties = ["id", "code", "iosAppVersion", "iosBuildVersion", "androidAppVersion", "androidBuildVersion", "androidStore", "iosStore", "forceUpdate", "videos"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IApp:
        """Create an instance of IApp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of videos
        if self.videos:
            _dict['videos'] = self.videos.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IApp:
        """Create an instance of IApp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IApp.parse_obj(obj)

        _obj = IApp.parse_obj({
            "id": obj.get("id"),
            "code": obj.get("code"),
            "ios_app_version": obj.get("iosAppVersion"),
            "ios_build_version": obj.get("iosBuildVersion"),
            "android_app_version": obj.get("androidAppVersion"),
            "android_build_version": obj.get("androidBuildVersion"),
            "android_store": obj.get("androidStore"),
            "ios_store": obj.get("iosStore"),
            "force_update": obj.get("forceUpdate"),
            "videos": VideosUrl.from_dict(obj.get("videos")) if obj.get("videos") is not None else None
        })
        return _obj


