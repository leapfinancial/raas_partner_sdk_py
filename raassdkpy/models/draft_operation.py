# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime

from pydantic import BaseModel, Field, StrictBool, StrictStr
from raassdkpy.models.draft_action_type import DraftActionType
from raassdkpy.models.draft_data import DraftData

class DraftOperation(BaseModel):
    """
    DraftOperation
    """
    id: StrictStr = Field(...)
    ttl: datetime = Field(...)
    user_id: StrictStr = Field(..., alias="userId")
    tenant_id: StrictStr = Field(..., alias="tenantId")
    is_used: StrictBool = Field(..., alias="isUsed")
    action_type: DraftActionType = Field(..., alias="actionType")
    data: DraftData = Field(...)
    __properties = ["id", "ttl", "userId", "tenantId", "isUsed", "actionType", "data"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DraftOperation:
        """Create an instance of DraftOperation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of data
        if self.data:
            _dict['data'] = self.data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DraftOperation:
        """Create an instance of DraftOperation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DraftOperation.parse_obj(obj)

        _obj = DraftOperation.parse_obj({
            "id": obj.get("id"),
            "ttl": obj.get("ttl"),
            "user_id": obj.get("userId"),
            "tenant_id": obj.get("tenantId"),
            "is_used": obj.get("isUsed"),
            "action_type": obj.get("actionType"),
            "data": DraftData.from_dict(obj.get("data")) if obj.get("data") is not None else None
        })
        return _obj


