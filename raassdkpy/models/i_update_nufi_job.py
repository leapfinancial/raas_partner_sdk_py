# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class IUpdateNufiJob(BaseModel):
    """
    IUpdateNufiJob
    """
    id: StrictStr = Field(...)
    status: Optional[StrictStr] = None
    message: Optional[StrictStr] = None
    code: Optional[Union[StrictFloat, StrictInt]] = None
    created_at: Optional[datetime] = Field(None, alias="createdAt")
    updated_at: Optional[datetime] = Field(None, alias="updatedAt")
    user_id: Optional[StrictStr] = Field(None, alias="userId")
    response: Optional[Any] = None
    __properties = ["id", "status", "message", "code", "createdAt", "updatedAt", "userId", "response"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IUpdateNufiJob:
        """Create an instance of IUpdateNufiJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if response (nullable) is None
        # and __fields_set__ contains the field
        if self.response is None and "response" in self.__fields_set__:
            _dict['response'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IUpdateNufiJob:
        """Create an instance of IUpdateNufiJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IUpdateNufiJob.parse_obj(obj)

        _obj = IUpdateNufiJob.parse_obj({
            "id": obj.get("id"),
            "status": obj.get("status"),
            "message": obj.get("message"),
            "code": obj.get("code"),
            "created_at": obj.get("createdAt"),
            "updated_at": obj.get("updatedAt"),
            "user_id": obj.get("userId"),
            "response": obj.get("response")
        })
        return _obj


