# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from raassdkpy.models.operation_user_detail import OperationUserDetail
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OperationDetail(BaseModel):
    """
    OperationDetail
    """ # noqa: E501
    id: StrictStr
    type: StrictStr
    created_at: datetime = Field(alias="createdAt")
    status: StrictStr
    reason: Optional[StrictStr] = None
    code: StrictStr
    amount: Union[StrictFloat, StrictInt]
    sender_amount: Union[StrictFloat, StrictInt] = Field(alias="senderAmount")
    recipient_amout: Union[StrictFloat, StrictInt] = Field(alias="recipientAmout")
    currency: Optional[StrictStr] = None
    sender_currency: Optional[StrictStr] = Field(default=None, alias="senderCurrency")
    recipient_currency: Optional[StrictStr] = Field(default=None, alias="recipientCurrency")
    exchange_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="exchangeRate")
    from_user: OperationUserDetail = Field(alias="fromUser")
    to_user: OperationUserDetail = Field(alias="toUser")
    attribution_link: Optional[StrictStr] = Field(default=None, alias="attributionLink")
    is_ignored: Optional[StrictBool] = Field(default=None, alias="isIgnored")
    ignored_data: Optional[Any] = Field(default=None, alias="ignoredData")
    __properties: ClassVar[List[str]] = ["id", "type", "createdAt", "status", "reason", "code", "amount", "senderAmount", "recipientAmout", "currency", "senderCurrency", "recipientCurrency", "exchangeRate", "fromUser", "toUser", "attributionLink", "isIgnored", "ignoredData"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OperationDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of from_user
        if self.from_user:
            _dict['fromUser'] = self.from_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of to_user
        if self.to_user:
            _dict['toUser'] = self.to_user.to_dict()
        # set to None if ignored_data (nullable) is None
        # and model_fields_set contains the field
        if self.ignored_data is None and "ignored_data" in self.model_fields_set:
            _dict['ignoredData'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OperationDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "createdAt": obj.get("createdAt"),
            "status": obj.get("status"),
            "reason": obj.get("reason"),
            "code": obj.get("code"),
            "amount": obj.get("amount"),
            "senderAmount": obj.get("senderAmount"),
            "recipientAmout": obj.get("recipientAmout"),
            "currency": obj.get("currency"),
            "senderCurrency": obj.get("senderCurrency"),
            "recipientCurrency": obj.get("recipientCurrency"),
            "exchangeRate": obj.get("exchangeRate"),
            "fromUser": OperationUserDetail.from_dict(obj.get("fromUser")) if obj.get("fromUser") is not None else None,
            "toUser": OperationUserDetail.from_dict(obj.get("toUser")) if obj.get("toUser") is not None else None,
            "attributionLink": obj.get("attributionLink"),
            "isIgnored": obj.get("isIgnored"),
            "ignoredData": obj.get("ignoredData")
        })
        return _obj


