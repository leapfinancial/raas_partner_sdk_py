# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist

class WhiteLabelResponse(BaseModel):
    """
    WhiteLabelResponse
    """
    id: Optional[StrictStr] = None
    primary_color: StrictStr = Field(..., alias="primaryColor")
    secondary_color: StrictStr = Field(..., alias="secondaryColor")
    third_color: StrictStr = Field(..., alias="thirdColor")
    surface_color: StrictStr = Field(..., alias="surfaceColor")
    full_logo_url: StrictStr = Field(..., alias="fullLogoUrl")
    small_logo_url: StrictStr = Field(..., alias="smallLogoUrl")
    white_logo_url: StrictStr = Field(..., alias="whiteLogoUrl")
    font_family: Optional[StrictStr] = Field(None, alias="fontFamily")
    color_gradient: Optional[conlist(StrictStr)] = Field(None, alias="colorGradient")
    gradient_icon: Optional[StrictBool] = Field(None, alias="gradientIcon")
    gradient_text: Optional[StrictBool] = Field(None, alias="gradientText")
    gradient_button: Optional[StrictBool] = Field(None, alias="gradientButton")
    gradient_logo: Optional[StrictBool] = Field(None, alias="gradientLogo")
    welcome_foot_message: Optional[StrictStr] = Field(None, alias="welcomeFootMessage")
    app_name: Optional[StrictStr] = Field(None, alias="appName")
    tenant_name: StrictStr = Field(..., alias="tenantName")
    __properties = ["id", "primaryColor", "secondaryColor", "thirdColor", "surfaceColor", "fullLogoUrl", "smallLogoUrl", "whiteLogoUrl", "fontFamily", "colorGradient", "gradientIcon", "gradientText", "gradientButton", "gradientLogo", "welcomeFootMessage", "appName", "tenantName"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WhiteLabelResponse:
        """Create an instance of WhiteLabelResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WhiteLabelResponse:
        """Create an instance of WhiteLabelResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WhiteLabelResponse.parse_obj(obj)

        _obj = WhiteLabelResponse.parse_obj({
            "id": obj.get("id"),
            "primary_color": obj.get("primaryColor"),
            "secondary_color": obj.get("secondaryColor"),
            "third_color": obj.get("thirdColor"),
            "surface_color": obj.get("surfaceColor"),
            "full_logo_url": obj.get("fullLogoUrl"),
            "small_logo_url": obj.get("smallLogoUrl"),
            "white_logo_url": obj.get("whiteLogoUrl"),
            "font_family": obj.get("fontFamily"),
            "color_gradient": obj.get("colorGradient"),
            "gradient_icon": obj.get("gradientIcon"),
            "gradient_text": obj.get("gradientText"),
            "gradient_button": obj.get("gradientButton"),
            "gradient_logo": obj.get("gradientLogo"),
            "welcome_foot_message": obj.get("welcomeFootMessage"),
            "app_name": obj.get("appName"),
            "tenant_name": obj.get("tenantName")
        })
        return _obj


