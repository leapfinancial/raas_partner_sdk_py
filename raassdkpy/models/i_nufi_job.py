# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from raassdkpy.models.i_nufi_job_response import INufiJobResponse

class INufiJob(BaseModel):
    """
    INufiJob
    """
    id: StrictStr = Field(...)
    status: StrictStr = Field(...)
    message: StrictStr = Field(...)
    code: Union[StrictFloat, StrictInt] = Field(...)
    created_at: datetime = Field(..., alias="createdAt")
    updated_at: datetime = Field(..., alias="updatedAt")
    user_id: Optional[StrictStr] = Field(None, alias="userId")
    ticket_id: Optional[StrictStr] = Field(None, alias="ticketId")
    response: Optional[INufiJobResponse] = None
    __properties = ["id", "status", "message", "code", "createdAt", "updatedAt", "userId", "ticketId", "response"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> INufiJob:
        """Create an instance of INufiJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of response
        if self.response:
            _dict['response'] = self.response.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> INufiJob:
        """Create an instance of INufiJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return INufiJob.parse_obj(obj)

        _obj = INufiJob.parse_obj({
            "id": obj.get("id"),
            "status": obj.get("status"),
            "message": obj.get("message"),
            "code": obj.get("code"),
            "created_at": obj.get("createdAt"),
            "updated_at": obj.get("updatedAt"),
            "user_id": obj.get("userId"),
            "ticket_id": obj.get("ticketId"),
            "response": INufiJobResponse.from_dict(obj.get("response")) if obj.get("response") is not None else None
        })
        return _obj


