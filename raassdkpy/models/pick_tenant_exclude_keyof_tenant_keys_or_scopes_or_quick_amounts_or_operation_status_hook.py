# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, validator
from raassdkpy.models.country import Country
from raassdkpy.models.tenant_rules import TenantRules
from raassdkpy.models.tenant_url_pages import TenantUrlPages

class PickTenantExcludeKeyofTenantKeysOrScopesOrQuickAmountsOrOperationStatusHook(BaseModel):
    """
    From T, pick a set of properties whose keys are in the union K  # noqa: E501
    """
    id: StrictStr = Field(...)
    code: StrictStr = Field(...)
    name: StrictStr = Field(...)
    brand_name: StrictStr = Field(..., alias="brandName")
    brand_name_dest: StrictStr = Field(..., alias="brandNameDest")
    owner: StrictStr = Field(...)
    trusted: StrictBool = Field(..., description="If true, the tenant is a financial institution and we can relay ont their KYC process. If false, the tenant is a non-financial institution and we can't relay their KYC process.")
    agreement_terms_url: TenantUrlPages = Field(...)
    agreement_policy_url: StrictStr = Field(..., description="Agreement policy URL to HTML page.")
    agreement_url: StrictStr = Field(..., description="Agreement URL to HTML page.")
    faq_url: TenantUrlPages = Field(...)
    support_url: StrictStr = Field(..., description="Support URL to HTML page.")
    smart_link_campaign: StrictStr = Field(..., description="Attribution link campaign")
    smart_link_base_url: StrictStr = Field(..., description="Attribution link base url")
    facebook_url: Optional[StrictStr] = Field(None, alias="facebookUrl", description="Tenant Social networks urls")
    instagram_url: Optional[StrictStr] = Field(None, alias="instagramUrl")
    notifications_phone: Optional[StrictStr] = Field(None, alias="notificationsPhone", description="Tenant OTP sender phone number")
    chat_assistant_name: Optional[StrictStr] = Field(None, alias="chatAssistantName", description="Managment chat Assistant name")
    country: Country = Field(...)
    fee: Union[StrictFloat, StrictInt] = Field(..., description="Partner fee")
    rules: Optional[TenantRules] = None
    shared_secret: Optional[StrictStr] = Field(None, alias="sharedSecret")
    partner_plat_id: Optional[StrictStr] = Field(None, alias="partnerPlatId")
    pair_partner_plat_id: Optional[StrictStr] = Field(None, alias="pairPartnerPlatId")
    group: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    generate_report: StrictBool = Field(..., alias="generateReport")
    s_ftp_data: Optional[StrictStr] = Field(None, alias="sFTPData")
    allow_send: Optional[StrictStr] = Field(None, alias="allowSend")
    __properties = ["id", "code", "name", "brandName", "brandNameDest", "owner", "trusted", "agreement_terms_url", "agreement_policy_url", "agreement_url", "faq_url", "support_url", "smart_link_campaign", "smart_link_base_url", "facebookUrl", "instagramUrl", "notificationsPhone", "chatAssistantName", "country", "fee", "rules", "sharedSecret", "partnerPlatId", "pairPartnerPlatId", "group", "type", "generateReport", "sFTPData", "allowSend"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('send', 'request'):
            raise ValueError("must be one of enum values ('send', 'request')")
        return value

    @validator('allow_send')
    def allow_send_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('allow', 'deny', 'whenReqCompleted'):
            raise ValueError("must be one of enum values ('allow', 'deny', 'whenReqCompleted')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PickTenantExcludeKeyofTenantKeysOrScopesOrQuickAmountsOrOperationStatusHook:
        """Create an instance of PickTenantExcludeKeyofTenantKeysOrScopesOrQuickAmountsOrOperationStatusHook from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of agreement_terms_url
        if self.agreement_terms_url:
            _dict['agreement_terms_url'] = self.agreement_terms_url.to_dict()
        # override the default output from pydantic by calling `to_dict()` of faq_url
        if self.faq_url:
            _dict['faq_url'] = self.faq_url.to_dict()
        # override the default output from pydantic by calling `to_dict()` of country
        if self.country:
            _dict['country'] = self.country.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rules
        if self.rules:
            _dict['rules'] = self.rules.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PickTenantExcludeKeyofTenantKeysOrScopesOrQuickAmountsOrOperationStatusHook:
        """Create an instance of PickTenantExcludeKeyofTenantKeysOrScopesOrQuickAmountsOrOperationStatusHook from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PickTenantExcludeKeyofTenantKeysOrScopesOrQuickAmountsOrOperationStatusHook.parse_obj(obj)

        _obj = PickTenantExcludeKeyofTenantKeysOrScopesOrQuickAmountsOrOperationStatusHook.parse_obj({
            "id": obj.get("id"),
            "code": obj.get("code"),
            "name": obj.get("name"),
            "brand_name": obj.get("brandName"),
            "brand_name_dest": obj.get("brandNameDest"),
            "owner": obj.get("owner"),
            "trusted": obj.get("trusted"),
            "agreement_terms_url": TenantUrlPages.from_dict(obj.get("agreement_terms_url")) if obj.get("agreement_terms_url") is not None else None,
            "agreement_policy_url": obj.get("agreement_policy_url"),
            "agreement_url": obj.get("agreement_url"),
            "faq_url": TenantUrlPages.from_dict(obj.get("faq_url")) if obj.get("faq_url") is not None else None,
            "support_url": obj.get("support_url"),
            "smart_link_campaign": obj.get("smart_link_campaign"),
            "smart_link_base_url": obj.get("smart_link_base_url"),
            "facebook_url": obj.get("facebookUrl"),
            "instagram_url": obj.get("instagramUrl"),
            "notifications_phone": obj.get("notificationsPhone"),
            "chat_assistant_name": obj.get("chatAssistantName"),
            "country": Country.from_dict(obj.get("country")) if obj.get("country") is not None else None,
            "fee": obj.get("fee"),
            "rules": TenantRules.from_dict(obj.get("rules")) if obj.get("rules") is not None else None,
            "shared_secret": obj.get("sharedSecret"),
            "partner_plat_id": obj.get("partnerPlatId"),
            "pair_partner_plat_id": obj.get("pairPartnerPlatId"),
            "group": obj.get("group"),
            "type": obj.get("type"),
            "generate_report": obj.get("generateReport"),
            "s_ftp_data": obj.get("sFTPData"),
            "allow_send": obj.get("allowSend")
        })
        return _obj


