# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from raassdkpy.models.map_entry import MapEntry
from raassdkpy.models.template_side import TemplateSide

class Template(BaseModel):
    """
    Template
    """
    id: StrictStr = Field(...)
    aspect_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="aspectRatio")
    front_mrz: Optional[StrictBool] = Field(None, alias="frontMRZ")
    back_mrz: Optional[StrictBool] = Field(None, alias="backMRZ")
    country: Optional[StrictStr] = None
    enabled: Optional[StrictBool] = None
    name: Optional[StrictStr] = None
    orientation: Optional[StrictStr] = None
    sides: Optional[conlist(TemplateSide)] = None
    type: Optional[StrictStr] = None
    version: Optional[StrictStr] = None
    lang: Optional[StrictStr] = None
    subtype: Optional[StrictStr] = None
    maps: Optional[conlist(MapEntry)] = None
    __properties = ["id", "aspectRatio", "frontMRZ", "backMRZ", "country", "enabled", "name", "orientation", "sides", "type", "version", "lang", "subtype", "maps"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Template:
        """Create an instance of Template from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in sides (list)
        _items = []
        if self.sides:
            for _item in self.sides:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sides'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in maps (list)
        _items = []
        if self.maps:
            for _item in self.maps:
                if _item:
                    _items.append(_item.to_dict())
            _dict['maps'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Template:
        """Create an instance of Template from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Template.parse_obj(obj)

        _obj = Template.parse_obj({
            "id": obj.get("id"),
            "aspect_ratio": obj.get("aspectRatio"),
            "front_mrz": obj.get("frontMRZ"),
            "back_mrz": obj.get("backMRZ"),
            "country": obj.get("country"),
            "enabled": obj.get("enabled"),
            "name": obj.get("name"),
            "orientation": obj.get("orientation"),
            "sides": [TemplateSide.from_dict(_item) for _item in obj.get("sides")] if obj.get("sides") is not None else None,
            "type": obj.get("type"),
            "version": obj.get("version"),
            "lang": obj.get("lang"),
            "subtype": obj.get("subtype"),
            "maps": [MapEntry.from_dict(_item) for _item in obj.get("maps")] if obj.get("maps") is not None else None
        })
        return _obj


